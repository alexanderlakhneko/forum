upstream phpfpm {
    server app:9000;
}

server {
    listen 80;

    client_max_body_size 5M;

    if ($host ~* www\.(.*)) {
      set $host_without_www $1;
      return 301 $scheme://$host_without_www$request_uri;
    }

    location ~* (.+?)([/]+)$ {
        return 301 $scheme://$host$1;
    }

    charset utf-8;

    root /usr/share/nginx/html/;

    index index.php;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    location / {
        try_files $uri @phphandler;
    }

    location ~ ^/index.php(.*) {
        return 301 $scheme://$host$1?$args;
    }

    location ~ \.php$ {
        try_files $uri @phphandler;

        fastcgi_keep_conn    on;
        fastcgi_pass         phpfpm;
        fastcgi_index        index.php;
        fastcgi_param        SCRIPT_FILENAME /app/public$fastcgi_script_name;
        include              fastcgi_params;
        fastcgi_read_timeout 600;
    }

    location @phphandler {
        fastcgi_keep_conn    on;
        fastcgi_pass         phpfpm;
        fastcgi_index        index.php;
        fastcgi_param        SCRIPT_FILENAME /app/public/index.php;
        include              fastcgi_params;
        fastcgi_read_timeout 600;
    }

    # Compression

    # Enable Gzip compressed.
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1.
    gzip_http_version  1.1;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
      application/atom+xml
      application/javascript
      application/json
      application/rss+xml
      application/vnd.ms-fontobject
      application/x-font-ttf
      application/x-web-app-manifest+json
      application/xhtml+xml
      application/xml
      font/opentype
      image/svg+xml
      image/x-icon
      text/css
      text/plain
      text/x-component;

    location ~* \.(jpg|jpeg|png|gif|ico|css|js|eot|ttf|woff|woff2)$ {
            expires max;
            add_header Cache-Control public;
            add_header Access-Control-Allow-Origin *;
            access_log off;
            try_files $uri @phphandler;
        }
}
